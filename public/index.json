[{"content":"Abstract Youtube shorts, Instagram reels, Tiktok– these are all short videos. There is one niche in particular, where entertaining background footage is combined with text to speech storytelling that pulls quite a bit of traction and viewership.\nOnce you look at these videos a little more, you realize how simple they are. Thus, can they be automated?\nYes, they can. Here is a high level overview of how I did it.\nIn the picture above, I create a reddit API instance and pull the top 400 comments from the post that I am interested in. The question is, how did I pick the comment I would use for my text to speech?\nEarly on, I was simply taking the top comment and just using that, but I noticed that the text to speech generated was pretty damn boring most of the time. For example, if the question:\nWhat is the most dangerous thing you have ever encountered?\nI would get videos where the story would be\u0026hellip; pretty boring LOL. Recycling, Trash Cans, Mosquitos\u0026hellip; I needed something that someone would stay and listen to. This led me to implement a way to rank each comment based on how interesting the comment is. How can we do this without human intervention? Large Language Models.\nWhat I did was take each comment that fit the criteria I was looking for\u0026hellip;\nif 500 \u0026lt; len(comment) \u0026lt; 700 usable_comments.append(comment) And use the GroqCloud API to score the comment on how interesting it would be to someone who has to listen to it play as text to speech.\nI defined a function called score() which returns an integer score for the comment, and called that function on the usable_comments array. If you were curious, here is the pseudocode for the score function:\n# THIS CODE DOES NOT WORK IT IS JUST FOR THE IDEAS # THIS CODE DOES NOT WORK IT IS JUST FOR THE IDEAS # THIS CODE DOES NOT WORK IT IS JUST FOR THE IDEAS def score(comment: str) -\u0026gt; int: client = groqclient.init() response = completion( {\u0026#34;system\u0026#34;: \u0026#34;score this comment...\u0026#34;}, {\u0026#34;content\u0026#34;: comment} ) score = response return score To store the data, I created a dictionary that had the comment as the key, and the score as the value.\nscore_map = {} for comment in usable_comments: result: int = score(comment) score_map.add(comment, result) comment_to_use: str = highest_score(score_map.values()) Now that I had the comment that was most interesting I passed it through a chain of functions that would do everything from creating the text to speech to upload it to youtube. This is what the function chain looked like:\ndef main(url, title): submission = start(url) location = f\u0026#34;videos/{submission.title}/{submission.title}_final.mp4\u0026#34; output_location = f\u0026#34;videos/{submission.title}/subtitled.mp4\u0026#34; create_title_voice_over_tiktok(submission.title, submission.title) add_text_to_image(submission.title) resize_image_width(f\u0026#34;videos/{submission.title}/{submission.title}.png\u0026#34;, f\u0026#34;videos/{submission.title}/{submission.title}.png\u0026#34;) create_movie_with_background_na(submission.title) subtitled_location = subtitles(location, output_location) link = youtube(subtitled_location, f\u0026#34;{title}\u0026#34;, \u0026#34;reddit\u0026#34;, 10, \u0026#34;reddit, funny, shorts\u0026#34;, \u0026#34;public\u0026#34;, False) return location, link # CALLING THE FUNCTION # CALLING THE FUNCTION # CALLING THE FUNCTION main(\u0026#34;https://www.reddit.com/r/AskReddit/comments/1c7vpsu/what_viral_video_is_fake_but_people_think_its_real/\u0026#34;, \u0026#34;#shorts\u0026#34;) I\u0026rsquo;ll break down what each part does. The scoring part was the only complex part of this, the rest is pretty easy to understand.\nstart(url) Takes the url of the reddit post, grabs the comments, and picks a comment to use. It uses the scoring system I explained above. It also creates the text to speech and stores it in the directory structure I made.\nlocation = f\u0026#34;videos/{submission.title}/{submission.title}_final.mp4\u0026#34; output_location = f\u0026#34;videos/{submission.title}/subtitled.mp4\u0026#34; There are just locations for where the generated videos would be stored. I predefined these so the function arguments wouldn\u0026rsquo;t be super long.\ncreate_title_voice_over_tiktok(submission.title, submission.title) Creates the voice over for the title of the post. The title is usually a question, and is asked first thing in the video. This definitely could be removed by adding the functionality to the start() function\u0026hellip;.. lol.\nadd_text_to_image(submission.title) Originally, I was using a selenium script to manually open Firefox, navigate to the reddit post, and take a screenshot of the \u0026lt;h1\u0026gt; tag as that was a title. However, if I want to host this in the cloud, I don\u0026rsquo;t want it to rely on any external browsers. To fix this, I created a template\u0026hellip;\nAnd I could simply add the title text on top of it and use that. The add_text_to_image() function takes this template and slaps a title onto it, and stores it in the proper directory.\nresize_image_width(f\u0026#34;videos/{submission.title}/{submission.title}.png\u0026#34;, f\u0026#34;videos/{submission.title}/{submission.title}.png\u0026#34;) Reels, tiktok, youtube shorts are all videos with 9x16 aspect ratios, so this just crops the image to fit in my background footage.\ncreate_movie_with_background_na(submission.title) Now that I have all the pieces I need to create a video, this function strings everything together in the order that I defined.\nsubtitled_location = subtitles(location, output_location) This is something that is quite interesting. Subtitling videos is actually quite expensive\u0026hellip; websites charge upwards of 30$ a month for subtitling services. However, I found a workaround using OpenAI\u0026rsquo;s whisper API. This function just adds subtitles and returns the filepath to the video.\nlink = youtube(subtitled_location, f\u0026#34;{title}\u0026#34;, \u0026#34;reddit\u0026#34;, 10, \u0026#34;reddit, funny, shorts\u0026#34;, \u0026#34;public\u0026#34;, False) Lastly, the video is uploaded to youtube. This is done by using google cloud\u0026rsquo;s youtube data API, which limits uploads to 6 per day.\nreturn location, link Once the video is uploaded, it returns a link to the newly uploaded short and the file location. The chain is now done, and a watchable, subtitled, and entertaining video is now on my channel.\nCompared to editing videos manually using editing software and paying for subtitling, I think this project was pretty cool to show how much can get done by simply knowing which libraries to use. If people made it this far, here are some libraries that are essential.\nmoviepy whisper opencv PIL numpy if you add @mer49 on discord\u0026hellip; you might get the source code.\n","permalink":"http://localhost:1313/posts/reddit/","summary":"Abstract Youtube shorts, Instagram reels, Tiktok– these are all short videos. There is one niche in particular, where entertaining background footage is combined with text to speech storytelling that pulls quite a bit of traction and viewership.\nOnce you look at these videos a little more, you realize how simple they are. Thus, can they be automated?\nYes, they can. Here is a high level overview of how I did it.","title":"automating youtube shorts with python"},{"content":"Key Topics OpenAI API Function Chains Validation Prompt Engineering Abstract In my university computer science course, we have an extensive code standard. We are provided with a linter that is a bash script and identifies most errors, but it doesn\u0026rsquo;t cover every case, such as embedded constants and local variable definitions. In this project, I will focus on embedded constants and cover 1. identifying these, and 2, fixing these.\nThe strategy I use to solve this issue can be applied to anything similar. To incite thought, think about something that is redundant. If you are familiar with large language models, think about something a large language model could help you automate. Anyways here is an example:\nHere is a Bad Example of Embedded Constant: if (temperature \u0026gt; 10) /* DO NOT USE */ Again, in this case the value means something, and you should define a constant instead... #define MAX_TEMPERATURE (10) First Approach I will be referencing the ChatGPT API quite a bit in the following text. If you are not comfortable with terminology, here is the link to the offical documentation. I am proceeding assuming you know how an API works and what it does.\nThe first approach I did was to do both steps (identifying and fixing) in one step. My API Request looked similar to this.\ncompletion = client.chat.completions.create( model=\u0026#34;gpt-4\u0026#34;, messages=[ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;\u0026#34;\u0026#34; Code Standard Check: \u0026#39;IX. DEFENSIVE CODING TECHNIQUE\u0026#39; compliance for C code. This tool inspects C code for adherence to defensive programming practices. Rules: - (IX.A) Check or return the function\u0026#39;s return value for error conditions. - (IX.B) Use fclose to close files opened with fopen and set the file pointer to NULL afterwards. - (IX.C) After using free on a pointer, set it to NULL. - (IX.D) Perform range checking on function parameters. - (IX.E) Use the correct typed symbol to represent 0 and NULL. Violation Examples: - Rule IX.A Violations (EXTREMELY IMPORTANT): FILE *file = fopen(\u0026#34;data.txt\u0026#34;, \u0026#34;r\u0026#34;); // Missing check for NULL after fopen char *data = (char *)malloc(100); // Missing check for NULL after malloc size_t result = fwrite(buffer, sizeof(char), 100, file); // Missing check on fwrite return value - Rule IX.B Violations: (EXTREMELY IMPORTANT) FILE *file = fopen(\u0026#34;data.txt\u0026#34;, \u0026#34;w\u0026#34;); fclose(file); // Missing file pointer set to NULL after fclose file = fopen(\u0026#34;data.txt\u0026#34;, \u0026#34;r\u0026#34;); if (file) { /* ... */ fclose(file); } // Correct use, but missing setting pointer to NULL - Rule IX.C Violations: char *data = (char *)malloc(50); free(data); // Missing set to NULL after free int *numbers = (int *)calloc(20, sizeof(int)); free(numbers); // Correct free, but missing set to NULL - Rule IX.D Violations void setTemperature(int temperature) { if (temperature \u0026lt; 0 || temperature \u0026gt; 100) { /* ... */ } } // Missing standardized range checking if (age \u0026gt;= 18 \u0026amp;\u0026amp; age \u0026lt;= 130) { /* ... */ } // Correct range, but consider using constants for readability - Rule IX.E Violations: int is_done = NULL; // Incorrect symbol, should use 0 for integers float value = NULL; // Incorrect symbol, should use 0.0 for reals Error Reporting Format: The following are the Error definitions to use: - (IX.A) Check Function Return - Ensure return values of functions are checked or returned. - (IX.B) File Close - Ensure files are closed and pointers are set to NULL. - (IX.C) Pointer Reset After Free - Ensure pointers are set to NULL after free. - (IX.D) Parameter Range Checking - Ensure parameters are within expected range. - (IX.E) Typed Symbol Usage - Ensure the correct symbol is used for 0 and NULL. - Errors are reported as \u0026#39;[RULE].[LETTER] - Error definition - Error Description, followed by a new line. [IX.A] - Check Function Return - FILE *file = fopen(\u0026#34;data.txt\u0026#34;, \u0026#34;r\u0026#34;); - Missing check for NULL after fopen. [IX.B] - File Close - FILE *file = fopen(\u0026#34;data.txt\u0026#34;, \u0026#34;w\u0026#34;); fclose(file); - Missing file pointer set to NULL after fclose. [IX.C] - Pointer Reset After Free - char *data = (char *)malloc(50); free(data); - Missing set to NULL after free. [IX.D] - Parameter Range Checking - void setTemperature(int temperature) { if (temperature \u0026lt; 0 || temperature \u0026gt; 100) { /* ... */ } } - Missing standardized range checking. [IX.E] - Typed Symbol Usage - int is_done = NULL; - Incorrect symbol, should use 0 for integers. Example Response: The prompt should only have the error codes. No extra text. Alphabetical order. If no errors are found, the response should be empty. [IX.A] - Check Function Return - FILE *file = fopen(\u0026#34;data.txt\u0026#34;, \u0026#34;r\u0026#34;); - Missing check for NULL after fopen. [IX.A] - Check Function Return - char *data = (char *)malloc(100); - Missing check for NULL after malloc. [IX.C] - Pointer Reset After Free - int *numbers = (int *)calloc(20, sizeof(int)); free(numbers); - Correct free, but missing set to NULL. \u0026#34;\u0026#34;\u0026#34; }, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: text_data} ] ) response = completion.choices[0].message.content However, this did not work. Something I quickly learned was the bigger the system prompt, the higher chance the language model has to forget, skip over something, or mess up in general. Also, I was simply copy and pasting straight from the code standard and passing in vague examples.\nI had to separate each step for more accurate results. Reiterating, there are two key steps for solving the issue of embedded constants.\n1. Identify which Constants are wrong. 2. Modify the Code to reflect the changes. First, I aimed to do step 1 in its own request. This means the language model is ONLY trying to identify constants, it\u0026rsquo;s not trying to fix them as well which allows for better focus on the task.\nThis is the system prompt I passed in:\n\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: Analyze the provided code snippets and identify any instances where literal numbers (embedded constants) are used directly in conditions, return statements, or variable initializations. Instead of using these literals directly, suggest defining them as constants at the beginning of the program to improve code readability and maintainability. Return these values and their line numbers in a python dictionary in the format of [constant_value]:[line_number] Once I had access to the constants to check and their line numbers, the second api request was quite straightfoward. I passed in the dictionary and the code, and the language model knew exactly where to look, completely removing the effort for searching.\nThis proved quite effective in producing accurate results. Here is the full completion request for the second prompt.\nmessages = [ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: You will be given a dictionary in formatted as constant:line_number. Navigate to that line number and determine if the constant holds intrinsic value. If it does, keep it. If it doesn\u0026#39;t, create a #define at the top of the code and replace the constant with it\u0026#39;s new constant. Be sure to go through all dictionary elements. }, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: entire_code} I\u0026rsquo;ve been using this for my homework and it\u0026rsquo;s worked pretty well over the semester. While this definitely could be automated using hard code and not API\u0026rsquo;s, it still is an interesting way to manipulate API requests into creating more accurate results.\n","permalink":"http://localhost:1313/posts/linter/","summary":"Key Topics OpenAI API Function Chains Validation Prompt Engineering Abstract In my university computer science course, we have an extensive code standard. We are provided with a linter that is a bash script and identifies most errors, but it doesn\u0026rsquo;t cover every case, such as embedded constants and local variable definitions. In this project, I will focus on embedded constants and cover 1. identifying these, and 2, fixing these.\nThe strategy I use to solve this issue can be applied to anything similar.","title":"fixing code style with style"},{"content":"Key Topics OpenAI Function Calls State Handling API Integration Abstract q: what is the uuid of the player merrydith? Question: How can my code respond to human like speech input?\nThis project is a demonstration on how a large language model can access information outside of the data set it was trained on. OpenAI has added the capability to create functions (ex. accessing mojang api) and call respective functions when the language model sees fit.\nMore importantly, it shows how a language model can process natural language into a format that API\u0026rsquo;s and computers can recognize. It allows us humans to communicate as a human to our code. Think about those AI chatbots on shopping stores. They 100% use the idea discussed in this article.\nGoal Say I type a sentence asking, \u0026quot;what is the id of this player?\u0026quot; to a python script. It would store the input in some variable, and try to pass it into an API that gets the id. However, the API would recieve the entire sentence, which would result in an error because the sentence is NOT a valid username.\nIf only there was a way to extract ONLY the username out of the sentence, and then pass it into the API\u0026hellip;\nThere is! OpenAI and most high end language models offer a strategy called function calling, which is better explained here. This article is just an example you can try once you get an understanding of what function calling is.\nqueued The request is queued for processing. This status indicates that the process has started but has not yet begun extracting the relevant data. in_progress The processing of the request is now in progress. At this stage, the script is actively working to extract the username from the provided sentence. requires_action This status typically indicates that additional input or confirmation may be needed; however, in this automated process, it proceeds swiftly to the next step. completed The process is completed, and the UUID has been successfully retrieved. Here is what the complete chain of events looks like: q: what is the id of the player merrydith \u0026#34;status\u0026#34;: \u0026#34;queued\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;in_progress\u0026#34;, Function Calling {\u0026#39;tool_calls\u0026#39;: [{\u0026#39;id\u0026#39;: \u0026#39;merrydith\u0026#39;, \u0026#39;function\u0026#39;: {\u0026#39;arguments\u0026#39;: \u0026#39;{\\n \u0026#34;username\u0026#34;: \u0026#34;merrydith\u0026#34;\\n}\u0026#39;, \u0026#39;name\u0026#39;: \u0026#39;get_uuid_from_username\u0026#39;}, \u0026#39;type\u0026#39;: \u0026#39;function\u0026#39;}]} Submitting outputs back to the Assistant... \u0026#34;status\u0026#34;: \u0026#34;requires_action\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;in_progress\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, Assistant: The id for \u0026#34;merrydith\u0026#34; is 4e0b33ffc796431aa99253626e33d4a6. Code from openai import OpenAI import time import os from dotenv import load_dotenv import requests load_dotenv() openai = os.getenv(\u0026#39;OPENAI_API_KEY\u0026#39;) hypixel = os.getenv(\u0026#39;HYPIXEL_API_KEY\u0026#39;) prompt = input(\u0026#34;q: \u0026#34;) #------------FUNCTIONS-----------------# def get_uuid_from_username(username: str) -\u0026gt; str: url = \u0026#34;https://api.mojang.com/users/profiles/minecraft/{username}\u0026#34; response = requests.get(url.format(username=username)) if response.status_code == 200: data = response.json() uuid = data.get(\u0026#34;id\u0026#34;) return uuid else: return \u0026#34;error\u0026#34; #------------TOOLS and CLIENT-----------------# tools_list = [{ \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34;, \u0026#34;function\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;get_uuid_from_username\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Retrieve the UUID given a minecraft username.\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;username\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;The minecraft username.\u0026#34; } }, \u0026#34;required\u0026#34;: [\u0026#34;username\u0026#34;] } } }] client = OpenAI(api_key=openai) #create assistant assistant = client.beta.assistants.create( name=\u0026#34;daniels assistant\u0026#34;, instructions=\u0026#34;You are a personal assistant that caters to any task.\u0026#34;, tools=tools_list, model=\u0026#34;gpt-3.5-turbo-0613\u0026#34;, ) #create thread thread = client.beta.threads.create() #add msg to thread message = client.beta.threads.messages.create( thread_id=thread.id, role=\u0026#34;user\u0026#34;, content=prompt ) #run the assistant run = client.beta.threads.runs.create( thread_id=thread.id, assistant_id=assistant.id, instructions=\u0026#34;Please address the user as Johnny Appleseed\u0026#34; ) print(run.model_dump_json(indent=4)) while True: time.sleep(1) #retrieve the run status run_status = client.beta.threads.runs.retrieve( thread_id=thread.id, run_id=run.id ) print(run_status.model_dump_json(indent=4)) # If run is completed, get messages if run_status.status == \u0026#39;completed\u0026#39;: messages = client.beta.threads.messages.list( thread_id=thread.id ) # Loop through messages and print content based on role for msg in messages.data: role = msg.role content = msg.content[0].text.value print(f\u0026#34;{role.capitalize()}: {content}\u0026#34;) break elif run_status.status == \u0026#39;requires_action\u0026#39;: print(\u0026#34;Function Calling\u0026#34;) required_actions = run_status.required_action.submit_tool_outputs.model_dump() print(required_actions) tool_outputs = [] import json for action in required_actions[\u0026#34;tool_calls\u0026#34;]: func_name = action[\u0026#39;function\u0026#39;][\u0026#39;name\u0026#39;] arguments = json.loads(action[\u0026#39;function\u0026#39;][\u0026#39;arguments\u0026#39;]) if func_name == \u0026#34;get_uuid_from_username\u0026#34;: output = get_uuid(username=arguments[\u0026#39;username\u0026#39;]) tool_outputs.append({ \u0026#34;tool_call_id\u0026#34;: action[\u0026#39;id\u0026#39;], \u0026#34;output\u0026#34;: output }) else: raise ValueError(f\u0026#34;Unknown function: {func_name}\u0026#34;) print(\u0026#34;Submitting outputs back to the Assistant...\u0026#34;) client.beta.threads.runs.submit_tool_outputs( thread_id=thread.id, run_id=run.id, tool_outputs=tool_outputs ) else: print(\u0026#34;Waiting for the Assistant to process...\u0026#34;) time.sleep(1) ","permalink":"http://localhost:1313/posts/function_calling/","summary":"Key Topics OpenAI Function Calls State Handling API Integration Abstract q: what is the uuid of the player merrydith? Question: How can my code respond to human like speech input?\nThis project is a demonstration on how a large language model can access information outside of the data set it was trained on. OpenAI has added the capability to create functions (ex. accessing mojang api) and call respective functions when the language model sees fit.","title":"introduction to openai function calling"}]